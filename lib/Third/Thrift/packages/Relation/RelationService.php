<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'] . '/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'] . '/packages/Relation/Relation_types.php';

interface RelationServiceIf {
    public function getFollow($uid, $type);
}

class RelationServiceClient implements RelationServiceIf {
    protected $input_ = null;
    protected $output_ = null;
    
    protected $seqid_ = 0;
    
    public function __construct($input, $output = null){
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }
    
    public function getFollow($uid, $type){
        $this->send_getFollow($uid, $type);
        return $this->recv_getFollow();
    }
    
    public function send_getFollow($uid, $type){
        $args = new xl_relation_RelationService_getFollow_args();
        $args->uid = $uid;
        $args->type = $type;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getFollow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getFollow', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getFollow(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'xl_relation_RelationService_getFollow_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new xl_relation_RelationService_getFollow_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getFollow failed: unknown result");
    }

}

// HELPER FUNCTIONS AND STRUCTURES


class xl_relation_RelationService_getFollow_args {
    static $_TSPEC;
    
    public $uid = null;
    public $type = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'uid', 'type'=>TType::STRING), 2=>array('var'=>'type', 'type'=>TType::I16));
        }
        if(is_array($vals)){
            if(isset($vals['uid'])){
                $this->uid = $vals['uid'];
            }
            if(isset($vals['type'])){
                $this->type = $vals['type'];
            }
        }
    }
    
    public function getName(){
        return 'RelationService_getFollow_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->uid);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I16){
                        $xfer += $input->readI16($this->type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('RelationService_getFollow_args');
        if($this->uid !== null){
            $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
            $xfer += $output->writeString($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if($this->type !== null){
            $xfer += $output->writeFieldBegin('type', TType::I16, 2);
            $xfer += $output->writeI16($this->type);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class xl_relation_RelationService_getFollow_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::LST, 'etype'=>TType::STRING, 'elem'=>array('type'=>TType::STRING)));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'RelationService_getFollow_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::LST){
                        $this->success = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for($_i4 = 0; $_i4 < $_size0; ++$_i4){
                            $elem5 = null;
                            $xfer += $input->readString($elem5);
                            $this->success[] = $elem5;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('RelationService_getFollow_result');
        if($this->success !== null){
            if(!is_array($this->success)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRING, count($this->success));
                {
                    foreach($this->success as $iter6){
                        $xfer += $output->writeString($iter6);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

?>
