<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'] . '/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'] . '/packages/xiangle_feed/xiangle_feed_types.php';

interface FeedServiceIf {
    public function add($oneFeed);
    public function reweet($oneFeed, $reweet_id);
    public function reweetGroup($oneFeed, $reweet_id);
    public function show($feed_id);
    public function showFeeds($feed_ids);
    public function getFeedCount($feed_ids);
    public function getSelfList($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist);
    public function getPublicList($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist);
    public function getPublicListGroup($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist);
    public function getSelfListGroup($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist);
    public function addFollowGroup($user, $f_user, $user_type);
    public function atFeedGroup($oneFeed);
    public function destroy($feed_id);
    public function atFeed($oneFeed);
    public function addFollow($user, $f_user, $user_type);
    public function getSelfListCnt($user, $big_label_type, $list_name);
    public function getPublicListCnt($user, $big_label_type, $list_name);
    public function getPublicListNewCnt($user, $big_label_type, $list_name);
    public function resetPublicListNewCnt($user, $big_label_type, $list_name);
}

class FeedServiceClient implements FeedServiceIf {
    protected $input_ = null;
    protected $output_ = null;
    
    protected $seqid_ = 0;
    
    public function __construct($input, $output = null){
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }
    
    public function add($oneFeed){
        $this->send_add($oneFeed);
        return $this->recv_add();
    }
    
    public function send_add($oneFeed){
        $args = new feed_FeedService_add_args();
        $args->oneFeed = $oneFeed;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'add', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('add', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_add(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_add_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_add_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("add failed: unknown result");
    }
    
    public function reweet($oneFeed, $reweet_id){
        $this->send_reweet($oneFeed, $reweet_id);
        return $this->recv_reweet();
    }
    
    public function send_reweet($oneFeed, $reweet_id){
        $args = new feed_FeedService_reweet_args();
        $args->oneFeed = $oneFeed;
        $args->reweet_id = $reweet_id;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'reweet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('reweet', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_reweet(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_reweet_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_reweet_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("reweet failed: unknown result");
    }
    
    public function reweetGroup($oneFeed, $reweet_id){
        $this->send_reweetGroup($oneFeed, $reweet_id);
        return $this->recv_reweetGroup();
    }
    
    public function send_reweetGroup($oneFeed, $reweet_id){
        $args = new feed_FeedService_reweetGroup_args();
        $args->oneFeed = $oneFeed;
        $args->reweet_id = $reweet_id;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'reweetGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('reweetGroup', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_reweetGroup(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_reweetGroup_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_reweetGroup_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("reweetGroup failed: unknown result");
    }
    
    public function show($feed_id){
        $this->send_show($feed_id);
        return $this->recv_show();
    }
    
    public function send_show($feed_id){
        $args = new feed_FeedService_show_args();
        $args->feed_id = $feed_id;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'show', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('show', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_show(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_show_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_show_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("show failed: unknown result");
    }
    
    public function showFeeds($feed_ids){
        $this->send_showFeeds($feed_ids);
        return $this->recv_showFeeds();
    }
    
    public function send_showFeeds($feed_ids){
        $args = new feed_FeedService_showFeeds_args();
        $args->feed_ids = $feed_ids;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'showFeeds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('showFeeds', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_showFeeds(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_showFeeds_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_showFeeds_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("showFeeds failed: unknown result");
    }
    
    public function getFeedCount($feed_ids){
        $this->send_getFeedCount($feed_ids);
        return $this->recv_getFeedCount();
    }
    
    public function send_getFeedCount($feed_ids){
        $args = new feed_FeedService_getFeedCount_args();
        $args->feed_ids = $feed_ids;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getFeedCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getFeedCount', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getFeedCount(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_getFeedCount_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_getFeedCount_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getFeedCount failed: unknown result");
    }
    
    public function getSelfList($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist){
        $this->send_getSelfList($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist);
        return $this->recv_getSelfList();
    }
    
    public function send_getSelfList($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist){
        $args = new feed_FeedService_getSelfList_args();
        $args->user = $user;
        $args->big_label_type = $big_label_type;
        $args->list_name = $list_name;
        $args->min_id = $min_id;
        $args->max_id = $max_id;
        $args->count = $count;
        $args->offset = $offset;
        $args->blacklist = $blacklist;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getSelfList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getSelfList', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getSelfList(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_getSelfList_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_getSelfList_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getSelfList failed: unknown result");
    }
    
    public function getPublicList($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist){
        $this->send_getPublicList($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist);
        return $this->recv_getPublicList();
    }
    
    public function send_getPublicList($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist){
        $args = new feed_FeedService_getPublicList_args();
        $args->user = $user;
        $args->big_label_type = $big_label_type;
        $args->list_name = $list_name;
        $args->min_id = $min_id;
        $args->max_id = $max_id;
        $args->count = $count;
        $args->offset = $offset;
        $args->blacklist = $blacklist;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getPublicList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getPublicList', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getPublicList(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_getPublicList_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_getPublicList_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getPublicList failed: unknown result");
    }
    
    public function getPublicListGroup($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist){
        $this->send_getPublicListGroup($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist);
        return $this->recv_getPublicListGroup();
    }
    
    public function send_getPublicListGroup($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist){
        $args = new feed_FeedService_getPublicListGroup_args();
        $args->user = $user;
        $args->big_label_type = $big_label_type;
        $args->list_name = $list_name;
        $args->min_id = $min_id;
        $args->max_id = $max_id;
        $args->count = $count;
        $args->offset = $offset;
        $args->blacklist = $blacklist;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getPublicListGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getPublicListGroup', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getPublicListGroup(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_getPublicListGroup_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_getPublicListGroup_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getPublicListGroup failed: unknown result");
    }
    
    public function getSelfListGroup($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist){
        $this->send_getSelfListGroup($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist);
        return $this->recv_getSelfListGroup();
    }
    
    public function send_getSelfListGroup($user, $big_label_type, $list_name, $min_id, $max_id, $count, $offset, $blacklist){
        $args = new feed_FeedService_getSelfListGroup_args();
        $args->user = $user;
        $args->big_label_type = $big_label_type;
        $args->list_name = $list_name;
        $args->min_id = $min_id;
        $args->max_id = $max_id;
        $args->count = $count;
        $args->offset = $offset;
        $args->blacklist = $blacklist;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getSelfListGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getSelfListGroup', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getSelfListGroup(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_getSelfListGroup_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_getSelfListGroup_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getSelfListGroup failed: unknown result");
    }
    
    public function addFollowGroup($user, $f_user, $user_type){
        $this->send_addFollowGroup($user, $f_user, $user_type);
        return $this->recv_addFollowGroup();
    }
    
    public function send_addFollowGroup($user, $f_user, $user_type){
        $args = new feed_FeedService_addFollowGroup_args();
        $args->user = $user;
        $args->f_user = $f_user;
        $args->user_type = $user_type;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'addFollowGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('addFollowGroup', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_addFollowGroup(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_addFollowGroup_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_addFollowGroup_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("addFollowGroup failed: unknown result");
    }
    
    public function atFeedGroup($oneFeed){
        $this->send_atFeedGroup($oneFeed);
        return $this->recv_atFeedGroup();
    }
    
    public function send_atFeedGroup($oneFeed){
        $args = new feed_FeedService_atFeedGroup_args();
        $args->oneFeed = $oneFeed;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'atFeedGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('atFeedGroup', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_atFeedGroup(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_atFeedGroup_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_atFeedGroup_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("atFeedGroup failed: unknown result");
    }
    
    public function destroy($feed_id){
        $this->send_destroy($feed_id);
        return $this->recv_destroy();
    }
    
    public function send_destroy($feed_id){
        $args = new feed_FeedService_destroy_args();
        $args->feed_id = $feed_id;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'destroy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('destroy', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_destroy(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_destroy_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_destroy_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("destroy failed: unknown result");
    }
    
    public function atFeed($oneFeed){
        $this->send_atFeed($oneFeed);
        return $this->recv_atFeed();
    }
    
    public function send_atFeed($oneFeed){
        $args = new feed_FeedService_atFeed_args();
        $args->oneFeed = $oneFeed;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'atFeed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('atFeed', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_atFeed(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_atFeed_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_atFeed_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("atFeed failed: unknown result");
    }
    
    public function addFollow($user, $f_user, $user_type){
        $this->send_addFollow($user, $f_user, $user_type);
        return $this->recv_addFollow();
    }
    
    public function send_addFollow($user, $f_user, $user_type){
        $args = new feed_FeedService_addFollow_args();
        $args->user = $user;
        $args->f_user = $f_user;
        $args->user_type = $user_type;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'addFollow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('addFollow', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_addFollow(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_addFollow_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_addFollow_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("addFollow failed: unknown result");
    }
    
    public function getSelfListCnt($user, $big_label_type, $list_name){
        $this->send_getSelfListCnt($user, $big_label_type, $list_name);
        return $this->recv_getSelfListCnt();
    }
    
    public function send_getSelfListCnt($user, $big_label_type, $list_name){
        $args = new feed_FeedService_getSelfListCnt_args();
        $args->user = $user;
        $args->big_label_type = $big_label_type;
        $args->list_name = $list_name;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getSelfListCnt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getSelfListCnt', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getSelfListCnt(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_getSelfListCnt_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_getSelfListCnt_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getSelfListCnt failed: unknown result");
    }
    
    public function getPublicListCnt($user, $big_label_type, $list_name){
        $this->send_getPublicListCnt($user, $big_label_type, $list_name);
        return $this->recv_getPublicListCnt();
    }
    
    public function send_getPublicListCnt($user, $big_label_type, $list_name){
        $args = new feed_FeedService_getPublicListCnt_args();
        $args->user = $user;
        $args->big_label_type = $big_label_type;
        $args->list_name = $list_name;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getPublicListCnt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getPublicListCnt', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getPublicListCnt(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_getPublicListCnt_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_getPublicListCnt_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getPublicListCnt failed: unknown result");
    }
    
    public function getPublicListNewCnt($user, $big_label_type, $list_name){
        $this->send_getPublicListNewCnt($user, $big_label_type, $list_name);
        return $this->recv_getPublicListNewCnt();
    }
    
    public function send_getPublicListNewCnt($user, $big_label_type, $list_name){
        $args = new feed_FeedService_getPublicListNewCnt_args();
        $args->user = $user;
        $args->big_label_type = $big_label_type;
        $args->list_name = $list_name;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'getPublicListNewCnt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('getPublicListNewCnt', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_getPublicListNewCnt(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_getPublicListNewCnt_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_getPublicListNewCnt_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("getPublicListNewCnt failed: unknown result");
    }
    
    public function resetPublicListNewCnt($user, $big_label_type, $list_name){
        $this->send_resetPublicListNewCnt($user, $big_label_type, $list_name);
        return $this->recv_resetPublicListNewCnt();
    }
    
    public function send_resetPublicListNewCnt($user, $big_label_type, $list_name){
        $args = new feed_FeedService_resetPublicListNewCnt_args();
        $args->user = $user;
        $args->big_label_type = $big_label_type;
        $args->list_name = $list_name;
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if($bin_accel){
            thrift_protocol_write_binary($this->output_, 'resetPublicListNewCnt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }else{
            $this->output_->writeMessageBegin('resetPublicListNewCnt', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    
    public function recv_resetPublicListNewCnt(){
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_FeedService_resetPublicListNewCnt_result', $this->input_->isStrictRead());
        else{
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if($mtype == TMessageType::EXCEPTION){
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new feed_FeedService_resetPublicListNewCnt_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if($result->success !== null){
            return $result->success;
        }
        throw new Exception("resetPublicListNewCnt failed: unknown result");
    }

}

// HELPER FUNCTIONS AND STRUCTURES


class feed_FeedService_add_args {
    static $_TSPEC;
    
    public $oneFeed = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'oneFeed', 'type'=>TType::STRUCT, 'class'=>'feed_Feed'));
        }
        if(is_array($vals)){
            if(isset($vals['oneFeed'])){
                $this->oneFeed = $vals['oneFeed'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_add_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRUCT){
                        $this->oneFeed = new feed_Feed();
                        $xfer += $this->oneFeed->read($input);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_add_args');
        if($this->oneFeed !== null){
            if(!is_object($this->oneFeed)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('oneFeed', TType::STRUCT, 1);
            $xfer += $this->oneFeed->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_add_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_add_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_add_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_reweet_args {
    static $_TSPEC;
    
    public $oneFeed = null;
    public $reweet_id = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'oneFeed', 'type'=>TType::STRUCT, 'class'=>'feed_Feed'), 2=>array('var'=>'reweet_id', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['oneFeed'])){
                $this->oneFeed = $vals['oneFeed'];
            }
            if(isset($vals['reweet_id'])){
                $this->reweet_id = $vals['reweet_id'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_reweet_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRUCT){
                        $this->oneFeed = new feed_Feed();
                        $xfer += $this->oneFeed->read($input);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->reweet_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_reweet_args');
        if($this->oneFeed !== null){
            if(!is_object($this->oneFeed)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('oneFeed', TType::STRUCT, 1);
            $xfer += $this->oneFeed->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if($this->reweet_id !== null){
            $xfer += $output->writeFieldBegin('reweet_id', TType::STRING, 2);
            $xfer += $output->writeString($this->reweet_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_reweet_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_reweet_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_reweet_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_reweetGroup_args {
    static $_TSPEC;
    
    public $oneFeed = null;
    public $reweet_id = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'oneFeed', 'type'=>TType::STRUCT, 'class'=>'feed_Feed'), 2=>array('var'=>'reweet_id', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['oneFeed'])){
                $this->oneFeed = $vals['oneFeed'];
            }
            if(isset($vals['reweet_id'])){
                $this->reweet_id = $vals['reweet_id'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_reweetGroup_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRUCT){
                        $this->oneFeed = new feed_Feed();
                        $xfer += $this->oneFeed->read($input);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->reweet_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_reweetGroup_args');
        if($this->oneFeed !== null){
            if(!is_object($this->oneFeed)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('oneFeed', TType::STRUCT, 1);
            $xfer += $this->oneFeed->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if($this->reweet_id !== null){
            $xfer += $output->writeFieldBegin('reweet_id', TType::STRING, 2);
            $xfer += $output->writeString($this->reweet_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_reweetGroup_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_reweetGroup_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_reweetGroup_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_show_args {
    static $_TSPEC;
    
    public $feed_id = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'feed_id', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['feed_id'])){
                $this->feed_id = $vals['feed_id'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_show_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->feed_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_show_args');
        if($this->feed_id !== null){
            $xfer += $output->writeFieldBegin('feed_id', TType::STRING, 1);
            $xfer += $output->writeString($this->feed_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_show_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::STRUCT, 'class'=>'feed_FeedContent'));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_show_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::STRUCT){
                        $this->success = new feed_FeedContent();
                        $xfer += $this->success->read($input);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_show_result');
        if($this->success !== null){
            if(!is_object($this->success)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_showFeeds_args {
    static $_TSPEC;
    
    public $feed_ids = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'feed_ids', 'type'=>TType::LST, 'etype'=>TType::STRING, 'elem'=>array('type'=>TType::STRING)));
        }
        if(is_array($vals)){
            if(isset($vals['feed_ids'])){
                $this->feed_ids = $vals['feed_ids'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_showFeeds_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::LST){
                        $this->feed_ids = array();
                        $_size14 = 0;
                        $_etype17 = 0;
                        $xfer += $input->readListBegin($_etype17, $_size14);
                        for($_i18 = 0; $_i18 < $_size14; ++$_i18){
                            $elem19 = null;
                            $xfer += $input->readString($elem19);
                            $this->feed_ids[] = $elem19;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_showFeeds_args');
        if($this->feed_ids !== null){
            if(!is_array($this->feed_ids)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('feed_ids', TType::LST, 1);
            {
                $output->writeListBegin(TType::STRING, count($this->feed_ids));
                {
                    foreach($this->feed_ids as $iter20){
                        $xfer += $output->writeString($iter20);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_showFeeds_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::LST, 'etype'=>TType::STRUCT, 'elem'=>array('type'=>TType::STRUCT, 'class'=>'feed_FeedContent')));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_showFeeds_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::LST){
                        $this->success = array();
                        $_size21 = 0;
                        $_etype24 = 0;
                        $xfer += $input->readListBegin($_etype24, $_size21);
                        for($_i25 = 0; $_i25 < $_size21; ++$_i25){
                            $elem26 = null;
                            $elem26 = new feed_FeedContent();
                            $xfer += $elem26->read($input);
                            $this->success[] = $elem26;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_showFeeds_result');
        if($this->success !== null){
            if(!is_array($this->success)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRUCT, count($this->success));
                {
                    foreach($this->success as $iter27){
                        $xfer += $iter27->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getFeedCount_args {
    static $_TSPEC;
    
    public $feed_ids = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'feed_ids', 'type'=>TType::LST, 'etype'=>TType::STRING, 'elem'=>array('type'=>TType::STRING)));
        }
        if(is_array($vals)){
            if(isset($vals['feed_ids'])){
                $this->feed_ids = $vals['feed_ids'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getFeedCount_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::LST){
                        $this->feed_ids = array();
                        $_size28 = 0;
                        $_etype31 = 0;
                        $xfer += $input->readListBegin($_etype31, $_size28);
                        for($_i32 = 0; $_i32 < $_size28; ++$_i32){
                            $elem33 = null;
                            $xfer += $input->readString($elem33);
                            $this->feed_ids[] = $elem33;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getFeedCount_args');
        if($this->feed_ids !== null){
            if(!is_array($this->feed_ids)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('feed_ids', TType::LST, 1);
            {
                $output->writeListBegin(TType::STRING, count($this->feed_ids));
                {
                    foreach($this->feed_ids as $iter34){
                        $xfer += $output->writeString($iter34);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getFeedCount_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::LST, 'etype'=>TType::STRUCT, 'elem'=>array('type'=>TType::STRUCT, 'class'=>'feed_FeedCount')));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getFeedCount_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::LST){
                        $this->success = array();
                        $_size35 = 0;
                        $_etype38 = 0;
                        $xfer += $input->readListBegin($_etype38, $_size35);
                        for($_i39 = 0; $_i39 < $_size35; ++$_i39){
                            $elem40 = null;
                            $elem40 = new feed_FeedCount();
                            $xfer += $elem40->read($input);
                            $this->success[] = $elem40;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getFeedCount_result');
        if($this->success !== null){
            if(!is_array($this->success)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRUCT, count($this->success));
                {
                    foreach($this->success as $iter41){
                        $xfer += $iter41->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getSelfList_args {
    static $_TSPEC;
    
    public $user = null;
    public $big_label_type = null;
    public $list_name = null;
    public $min_id = null;
    public $max_id = null;
    public $count = null;
    public $offset = null;
    public $blacklist = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'big_label_type', 'type'=>TType::I32), 3=>array('var'=>'list_name', 'type'=>TType::I32), 4=>array('var'=>'min_id', 'type'=>TType::STRING), 5=>array('var'=>'max_id', 'type'=>TType::STRING), 6=>array('var'=>'count', 'type'=>TType::I32), 7=>array('var'=>'offset', 'type'=>TType::I32), 8=>array('var'=>'blacklist', 'type'=>TType::SET, 'etype'=>TType::I16, 'elem'=>array('type'=>TType::I16)));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['big_label_type'])){
                $this->big_label_type = $vals['big_label_type'];
            }
            if(isset($vals['list_name'])){
                $this->list_name = $vals['list_name'];
            }
            if(isset($vals['min_id'])){
                $this->min_id = $vals['min_id'];
            }
            if(isset($vals['max_id'])){
                $this->max_id = $vals['max_id'];
            }
            if(isset($vals['count'])){
                $this->count = $vals['count'];
            }
            if(isset($vals['offset'])){
                $this->offset = $vals['offset'];
            }
            if(isset($vals['blacklist'])){
                $this->blacklist = $vals['blacklist'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getSelfList_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->big_label_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->list_name);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->min_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->max_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->count);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->offset);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if($ftype == TType::SET){
                        $this->blacklist = array();
                        $_size42 = 0;
                        $_etype45 = 0;
                        $xfer += $input->readSetBegin($_etype45, $_size42);
                        for($_i46 = 0; $_i46 < $_size42; ++$_i46){
                            $elem47 = null;
                            $xfer += $input->readI16($elem47);
                            $this->blacklist[$elem47] = true;
                        }
                        $xfer += $input->readSetEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getSelfList_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->big_label_type !== null){
            $xfer += $output->writeFieldBegin('big_label_type', TType::I32, 2);
            $xfer += $output->writeI32($this->big_label_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->list_name !== null){
            $xfer += $output->writeFieldBegin('list_name', TType::I32, 3);
            $xfer += $output->writeI32($this->list_name);
            $xfer += $output->writeFieldEnd();
        }
        if($this->min_id !== null){
            $xfer += $output->writeFieldBegin('min_id', TType::STRING, 4);
            $xfer += $output->writeString($this->min_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->max_id !== null){
            $xfer += $output->writeFieldBegin('max_id', TType::STRING, 5);
            $xfer += $output->writeString($this->max_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->count !== null){
            $xfer += $output->writeFieldBegin('count', TType::I32, 6);
            $xfer += $output->writeI32($this->count);
            $xfer += $output->writeFieldEnd();
        }
        if($this->offset !== null){
            $xfer += $output->writeFieldBegin('offset', TType::I32, 7);
            $xfer += $output->writeI32($this->offset);
            $xfer += $output->writeFieldEnd();
        }
        if($this->blacklist !== null){
            if(!is_array($this->blacklist)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('blacklist', TType::SET, 8);
            {
                $output->writeSetBegin(TType::I16, count($this->blacklist));
                {
                    foreach($this->blacklist as $iter48=>$true){
                        $xfer += $output->writeI16($iter48);
                    }
                }
                $output->writeSetEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getSelfList_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::LST, 'etype'=>TType::STRUCT, 'elem'=>array('type'=>TType::STRUCT, 'class'=>'feed_FeedSet')));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getSelfList_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::LST){
                        $this->success = array();
                        $_size49 = 0;
                        $_etype52 = 0;
                        $xfer += $input->readListBegin($_etype52, $_size49);
                        for($_i53 = 0; $_i53 < $_size49; ++$_i53){
                            $elem54 = null;
                            $elem54 = new feed_FeedSet();
                            $xfer += $elem54->read($input);
                            $this->success[] = $elem54;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getSelfList_result');
        if($this->success !== null){
            if(!is_array($this->success)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRUCT, count($this->success));
                {
                    foreach($this->success as $iter55){
                        $xfer += $iter55->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getPublicList_args {
    static $_TSPEC;
    
    public $user = null;
    public $big_label_type = null;
    public $list_name = null;
    public $min_id = null;
    public $max_id = null;
    public $count = null;
    public $offset = null;
    public $blacklist = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'big_label_type', 'type'=>TType::I32), 3=>array('var'=>'list_name', 'type'=>TType::I32), 4=>array('var'=>'min_id', 'type'=>TType::STRING), 5=>array('var'=>'max_id', 'type'=>TType::STRING), 6=>array('var'=>'count', 'type'=>TType::I32), 7=>array('var'=>'offset', 'type'=>TType::I32), 8=>array('var'=>'blacklist', 'type'=>TType::SET, 'etype'=>TType::I16, 'elem'=>array('type'=>TType::I16)));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['big_label_type'])){
                $this->big_label_type = $vals['big_label_type'];
            }
            if(isset($vals['list_name'])){
                $this->list_name = $vals['list_name'];
            }
            if(isset($vals['min_id'])){
                $this->min_id = $vals['min_id'];
            }
            if(isset($vals['max_id'])){
                $this->max_id = $vals['max_id'];
            }
            if(isset($vals['count'])){
                $this->count = $vals['count'];
            }
            if(isset($vals['offset'])){
                $this->offset = $vals['offset'];
            }
            if(isset($vals['blacklist'])){
                $this->blacklist = $vals['blacklist'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getPublicList_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->big_label_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->list_name);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->min_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->max_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->count);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->offset);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if($ftype == TType::SET){
                        $this->blacklist = array();
                        $_size56 = 0;
                        $_etype59 = 0;
                        $xfer += $input->readSetBegin($_etype59, $_size56);
                        for($_i60 = 0; $_i60 < $_size56; ++$_i60){
                            $elem61 = null;
                            $xfer += $input->readI16($elem61);
                            $this->blacklist[$elem61] = true;
                        }
                        $xfer += $input->readSetEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getPublicList_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->big_label_type !== null){
            $xfer += $output->writeFieldBegin('big_label_type', TType::I32, 2);
            $xfer += $output->writeI32($this->big_label_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->list_name !== null){
            $xfer += $output->writeFieldBegin('list_name', TType::I32, 3);
            $xfer += $output->writeI32($this->list_name);
            $xfer += $output->writeFieldEnd();
        }
        if($this->min_id !== null){
            $xfer += $output->writeFieldBegin('min_id', TType::STRING, 4);
            $xfer += $output->writeString($this->min_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->max_id !== null){
            $xfer += $output->writeFieldBegin('max_id', TType::STRING, 5);
            $xfer += $output->writeString($this->max_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->count !== null){
            $xfer += $output->writeFieldBegin('count', TType::I32, 6);
            $xfer += $output->writeI32($this->count);
            $xfer += $output->writeFieldEnd();
        }
        if($this->offset !== null){
            $xfer += $output->writeFieldBegin('offset', TType::I32, 7);
            $xfer += $output->writeI32($this->offset);
            $xfer += $output->writeFieldEnd();
        }
        if($this->blacklist !== null){
            if(!is_array($this->blacklist)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('blacklist', TType::SET, 8);
            {
                $output->writeSetBegin(TType::I16, count($this->blacklist));
                {
                    foreach($this->blacklist as $iter62=>$true){
                        $xfer += $output->writeI16($iter62);
                    }
                }
                $output->writeSetEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getPublicList_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::LST, 'etype'=>TType::STRUCT, 'elem'=>array('type'=>TType::STRUCT, 'class'=>'feed_FeedSet')));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getPublicList_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::LST){
                        $this->success = array();
                        $_size63 = 0;
                        $_etype66 = 0;
                        $xfer += $input->readListBegin($_etype66, $_size63);
                        for($_i67 = 0; $_i67 < $_size63; ++$_i67){
                            $elem68 = null;
                            $elem68 = new feed_FeedSet();
                            $xfer += $elem68->read($input);
                            $this->success[] = $elem68;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getPublicList_result');
        if($this->success !== null){
            if(!is_array($this->success)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRUCT, count($this->success));
                {
                    foreach($this->success as $iter69){
                        $xfer += $iter69->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getPublicListGroup_args {
    static $_TSPEC;
    
    public $user = null;
    public $big_label_type = null;
    public $list_name = null;
    public $min_id = null;
    public $max_id = null;
    public $count = null;
    public $offset = null;
    public $blacklist = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'big_label_type', 'type'=>TType::I32), 3=>array('var'=>'list_name', 'type'=>TType::I32), 4=>array('var'=>'min_id', 'type'=>TType::STRING), 5=>array('var'=>'max_id', 'type'=>TType::STRING), 6=>array('var'=>'count', 'type'=>TType::I32), 7=>array('var'=>'offset', 'type'=>TType::I32), 8=>array('var'=>'blacklist', 'type'=>TType::SET, 'etype'=>TType::I16, 'elem'=>array('type'=>TType::I16)));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['big_label_type'])){
                $this->big_label_type = $vals['big_label_type'];
            }
            if(isset($vals['list_name'])){
                $this->list_name = $vals['list_name'];
            }
            if(isset($vals['min_id'])){
                $this->min_id = $vals['min_id'];
            }
            if(isset($vals['max_id'])){
                $this->max_id = $vals['max_id'];
            }
            if(isset($vals['count'])){
                $this->count = $vals['count'];
            }
            if(isset($vals['offset'])){
                $this->offset = $vals['offset'];
            }
            if(isset($vals['blacklist'])){
                $this->blacklist = $vals['blacklist'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getPublicListGroup_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->big_label_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->list_name);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->min_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->max_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->count);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->offset);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if($ftype == TType::SET){
                        $this->blacklist = array();
                        $_size70 = 0;
                        $_etype73 = 0;
                        $xfer += $input->readSetBegin($_etype73, $_size70);
                        for($_i74 = 0; $_i74 < $_size70; ++$_i74){
                            $elem75 = null;
                            $xfer += $input->readI16($elem75);
                            $this->blacklist[$elem75] = true;
                        }
                        $xfer += $input->readSetEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getPublicListGroup_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->big_label_type !== null){
            $xfer += $output->writeFieldBegin('big_label_type', TType::I32, 2);
            $xfer += $output->writeI32($this->big_label_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->list_name !== null){
            $xfer += $output->writeFieldBegin('list_name', TType::I32, 3);
            $xfer += $output->writeI32($this->list_name);
            $xfer += $output->writeFieldEnd();
        }
        if($this->min_id !== null){
            $xfer += $output->writeFieldBegin('min_id', TType::STRING, 4);
            $xfer += $output->writeString($this->min_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->max_id !== null){
            $xfer += $output->writeFieldBegin('max_id', TType::STRING, 5);
            $xfer += $output->writeString($this->max_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->count !== null){
            $xfer += $output->writeFieldBegin('count', TType::I32, 6);
            $xfer += $output->writeI32($this->count);
            $xfer += $output->writeFieldEnd();
        }
        if($this->offset !== null){
            $xfer += $output->writeFieldBegin('offset', TType::I32, 7);
            $xfer += $output->writeI32($this->offset);
            $xfer += $output->writeFieldEnd();
        }
        if($this->blacklist !== null){
            if(!is_array($this->blacklist)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('blacklist', TType::SET, 8);
            {
                $output->writeSetBegin(TType::I16, count($this->blacklist));
                {
                    foreach($this->blacklist as $iter76=>$true){
                        $xfer += $output->writeI16($iter76);
                    }
                }
                $output->writeSetEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getPublicListGroup_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::LST, 'etype'=>TType::STRUCT, 'elem'=>array('type'=>TType::STRUCT, 'class'=>'feed_FeedSet')));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getPublicListGroup_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::LST){
                        $this->success = array();
                        $_size77 = 0;
                        $_etype80 = 0;
                        $xfer += $input->readListBegin($_etype80, $_size77);
                        for($_i81 = 0; $_i81 < $_size77; ++$_i81){
                            $elem82 = null;
                            $elem82 = new feed_FeedSet();
                            $xfer += $elem82->read($input);
                            $this->success[] = $elem82;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getPublicListGroup_result');
        if($this->success !== null){
            if(!is_array($this->success)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRUCT, count($this->success));
                {
                    foreach($this->success as $iter83){
                        $xfer += $iter83->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getSelfListGroup_args {
    static $_TSPEC;
    
    public $user = null;
    public $big_label_type = null;
    public $list_name = null;
    public $min_id = null;
    public $max_id = null;
    public $count = null;
    public $offset = null;
    public $blacklist = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'big_label_type', 'type'=>TType::I32), 3=>array('var'=>'list_name', 'type'=>TType::I32), 4=>array('var'=>'min_id', 'type'=>TType::STRING), 5=>array('var'=>'max_id', 'type'=>TType::STRING), 6=>array('var'=>'count', 'type'=>TType::I32), 7=>array('var'=>'offset', 'type'=>TType::I32), 8=>array('var'=>'blacklist', 'type'=>TType::SET, 'etype'=>TType::I16, 'elem'=>array('type'=>TType::I16)));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['big_label_type'])){
                $this->big_label_type = $vals['big_label_type'];
            }
            if(isset($vals['list_name'])){
                $this->list_name = $vals['list_name'];
            }
            if(isset($vals['min_id'])){
                $this->min_id = $vals['min_id'];
            }
            if(isset($vals['max_id'])){
                $this->max_id = $vals['max_id'];
            }
            if(isset($vals['count'])){
                $this->count = $vals['count'];
            }
            if(isset($vals['offset'])){
                $this->offset = $vals['offset'];
            }
            if(isset($vals['blacklist'])){
                $this->blacklist = $vals['blacklist'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getSelfListGroup_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->big_label_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->list_name);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->min_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->max_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->count);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->offset);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if($ftype == TType::SET){
                        $this->blacklist = array();
                        $_size84 = 0;
                        $_etype87 = 0;
                        $xfer += $input->readSetBegin($_etype87, $_size84);
                        for($_i88 = 0; $_i88 < $_size84; ++$_i88){
                            $elem89 = null;
                            $xfer += $input->readI16($elem89);
                            $this->blacklist[$elem89] = true;
                        }
                        $xfer += $input->readSetEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getSelfListGroup_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->big_label_type !== null){
            $xfer += $output->writeFieldBegin('big_label_type', TType::I32, 2);
            $xfer += $output->writeI32($this->big_label_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->list_name !== null){
            $xfer += $output->writeFieldBegin('list_name', TType::I32, 3);
            $xfer += $output->writeI32($this->list_name);
            $xfer += $output->writeFieldEnd();
        }
        if($this->min_id !== null){
            $xfer += $output->writeFieldBegin('min_id', TType::STRING, 4);
            $xfer += $output->writeString($this->min_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->max_id !== null){
            $xfer += $output->writeFieldBegin('max_id', TType::STRING, 5);
            $xfer += $output->writeString($this->max_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->count !== null){
            $xfer += $output->writeFieldBegin('count', TType::I32, 6);
            $xfer += $output->writeI32($this->count);
            $xfer += $output->writeFieldEnd();
        }
        if($this->offset !== null){
            $xfer += $output->writeFieldBegin('offset', TType::I32, 7);
            $xfer += $output->writeI32($this->offset);
            $xfer += $output->writeFieldEnd();
        }
        if($this->blacklist !== null){
            if(!is_array($this->blacklist)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('blacklist', TType::SET, 8);
            {
                $output->writeSetBegin(TType::I16, count($this->blacklist));
                {
                    foreach($this->blacklist as $iter90=>$true){
                        $xfer += $output->writeI16($iter90);
                    }
                }
                $output->writeSetEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getSelfListGroup_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::LST, 'etype'=>TType::STRUCT, 'elem'=>array('type'=>TType::STRUCT, 'class'=>'feed_FeedSet')));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getSelfListGroup_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::LST){
                        $this->success = array();
                        $_size91 = 0;
                        $_etype94 = 0;
                        $xfer += $input->readListBegin($_etype94, $_size91);
                        for($_i95 = 0; $_i95 < $_size91; ++$_i95){
                            $elem96 = null;
                            $elem96 = new feed_FeedSet();
                            $xfer += $elem96->read($input);
                            $this->success[] = $elem96;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getSelfListGroup_result');
        if($this->success !== null){
            if(!is_array($this->success)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRUCT, count($this->success));
                {
                    foreach($this->success as $iter97){
                        $xfer += $iter97->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_addFollowGroup_args {
    static $_TSPEC;
    
    public $user = null;
    public $f_user = null;
    public $user_type = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'f_user', 'type'=>TType::STRING), 3=>array('var'=>'user_type', 'type'=>TType::I16));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['f_user'])){
                $this->f_user = $vals['f_user'];
            }
            if(isset($vals['user_type'])){
                $this->user_type = $vals['user_type'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_addFollowGroup_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->f_user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I16){
                        $xfer += $input->readI16($this->user_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_addFollowGroup_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->f_user !== null){
            $xfer += $output->writeFieldBegin('f_user', TType::STRING, 2);
            $xfer += $output->writeString($this->f_user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->user_type !== null){
            $xfer += $output->writeFieldBegin('user_type', TType::I16, 3);
            $xfer += $output->writeI16($this->user_type);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_addFollowGroup_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::BOOL));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_addFollowGroup_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::BOOL){
                        $xfer += $input->readBool($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_addFollowGroup_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_atFeedGroup_args {
    static $_TSPEC;
    
    public $oneFeed = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'oneFeed', 'type'=>TType::STRUCT, 'class'=>'feed_Feed'));
        }
        if(is_array($vals)){
            if(isset($vals['oneFeed'])){
                $this->oneFeed = $vals['oneFeed'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_atFeedGroup_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRUCT){
                        $this->oneFeed = new feed_Feed();
                        $xfer += $this->oneFeed->read($input);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_atFeedGroup_args');
        if($this->oneFeed !== null){
            if(!is_object($this->oneFeed)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('oneFeed', TType::STRUCT, 1);
            $xfer += $this->oneFeed->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_atFeedGroup_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_atFeedGroup_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_atFeedGroup_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_destroy_args {
    static $_TSPEC;
    
    public $feed_id = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'feed_id', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['feed_id'])){
                $this->feed_id = $vals['feed_id'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_destroy_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->feed_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_destroy_args');
        if($this->feed_id !== null){
            $xfer += $output->writeFieldBegin('feed_id', TType::STRING, 1);
            $xfer += $output->writeString($this->feed_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_destroy_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::BOOL));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_destroy_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::BOOL){
                        $xfer += $input->readBool($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_destroy_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_atFeed_args {
    static $_TSPEC;
    
    public $oneFeed = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'oneFeed', 'type'=>TType::STRUCT, 'class'=>'feed_Feed'));
        }
        if(is_array($vals)){
            if(isset($vals['oneFeed'])){
                $this->oneFeed = $vals['oneFeed'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_atFeed_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRUCT){
                        $this->oneFeed = new feed_Feed();
                        $xfer += $this->oneFeed->read($input);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_atFeed_args');
        if($this->oneFeed !== null){
            if(!is_object($this->oneFeed)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('oneFeed', TType::STRUCT, 1);
            $xfer += $this->oneFeed->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_atFeed_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_atFeed_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_atFeed_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_addFollow_args {
    static $_TSPEC;
    
    public $user = null;
    public $f_user = null;
    public $user_type = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'f_user', 'type'=>TType::STRING), 3=>array('var'=>'user_type', 'type'=>TType::I16));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['f_user'])){
                $this->f_user = $vals['f_user'];
            }
            if(isset($vals['user_type'])){
                $this->user_type = $vals['user_type'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_addFollow_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->f_user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I16){
                        $xfer += $input->readI16($this->user_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_addFollow_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->f_user !== null){
            $xfer += $output->writeFieldBegin('f_user', TType::STRING, 2);
            $xfer += $output->writeString($this->f_user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->user_type !== null){
            $xfer += $output->writeFieldBegin('user_type', TType::I16, 3);
            $xfer += $output->writeI16($this->user_type);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_addFollow_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::BOOL));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_addFollow_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::BOOL){
                        $xfer += $input->readBool($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_addFollow_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getSelfListCnt_args {
    static $_TSPEC;
    
    public $user = null;
    public $big_label_type = null;
    public $list_name = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'big_label_type', 'type'=>TType::I32), 3=>array('var'=>'list_name', 'type'=>TType::I32));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['big_label_type'])){
                $this->big_label_type = $vals['big_label_type'];
            }
            if(isset($vals['list_name'])){
                $this->list_name = $vals['list_name'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getSelfListCnt_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->big_label_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->list_name);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getSelfListCnt_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->big_label_type !== null){
            $xfer += $output->writeFieldBegin('big_label_type', TType::I32, 2);
            $xfer += $output->writeI32($this->big_label_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->list_name !== null){
            $xfer += $output->writeFieldBegin('list_name', TType::I32, 3);
            $xfer += $output->writeI32($this->list_name);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getSelfListCnt_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::I32));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getSelfListCnt_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getSelfListCnt_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::I32, 0);
            $xfer += $output->writeI32($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getPublicListCnt_args {
    static $_TSPEC;
    
    public $user = null;
    public $big_label_type = null;
    public $list_name = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'big_label_type', 'type'=>TType::I32), 3=>array('var'=>'list_name', 'type'=>TType::I32));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['big_label_type'])){
                $this->big_label_type = $vals['big_label_type'];
            }
            if(isset($vals['list_name'])){
                $this->list_name = $vals['list_name'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getPublicListCnt_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->big_label_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->list_name);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getPublicListCnt_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->big_label_type !== null){
            $xfer += $output->writeFieldBegin('big_label_type', TType::I32, 2);
            $xfer += $output->writeI32($this->big_label_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->list_name !== null){
            $xfer += $output->writeFieldBegin('list_name', TType::I32, 3);
            $xfer += $output->writeI32($this->list_name);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getPublicListCnt_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::I32));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getPublicListCnt_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getPublicListCnt_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::I32, 0);
            $xfer += $output->writeI32($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getPublicListNewCnt_args {
    static $_TSPEC;
    
    public $user = null;
    public $big_label_type = null;
    public $list_name = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'big_label_type', 'type'=>TType::I32), 3=>array('var'=>'list_name', 'type'=>TType::I32));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['big_label_type'])){
                $this->big_label_type = $vals['big_label_type'];
            }
            if(isset($vals['list_name'])){
                $this->list_name = $vals['list_name'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getPublicListNewCnt_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->big_label_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->list_name);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getPublicListNewCnt_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->big_label_type !== null){
            $xfer += $output->writeFieldBegin('big_label_type', TType::I32, 2);
            $xfer += $output->writeI32($this->big_label_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->list_name !== null){
            $xfer += $output->writeFieldBegin('list_name', TType::I32, 3);
            $xfer += $output->writeI32($this->list_name);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_getPublicListNewCnt_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::I32));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_getPublicListNewCnt_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_getPublicListNewCnt_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::I32, 0);
            $xfer += $output->writeI32($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_resetPublicListNewCnt_args {
    static $_TSPEC;
    
    public $user = null;
    public $big_label_type = null;
    public $list_name = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'user', 'type'=>TType::STRING), 2=>array('var'=>'big_label_type', 'type'=>TType::I32), 3=>array('var'=>'list_name', 'type'=>TType::I32));
        }
        if(is_array($vals)){
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['big_label_type'])){
                $this->big_label_type = $vals['big_label_type'];
            }
            if(isset($vals['list_name'])){
                $this->list_name = $vals['list_name'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_resetPublicListNewCnt_args';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->big_label_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->list_name);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_resetPublicListNewCnt_args');
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->big_label_type !== null){
            $xfer += $output->writeFieldBegin('big_label_type', TType::I32, 2);
            $xfer += $output->writeI32($this->big_label_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->list_name !== null){
            $xfer += $output->writeFieldBegin('list_name', TType::I32, 3);
            $xfer += $output->writeI32($this->list_name);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedService_resetPublicListNewCnt_result {
    static $_TSPEC;
    
    public $success = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(0=>array('var'=>'success', 'type'=>TType::BOOL));
        }
        if(is_array($vals)){
            if(isset($vals['success'])){
                $this->success = $vals['success'];
            }
        }
    }
    
    public function getName(){
        return 'FeedService_resetPublicListNewCnt_result';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 0:
                    if($ftype == TType::BOOL){
                        $xfer += $input->readBool($this->success);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedService_resetPublicListNewCnt_result');
        if($this->success !== null){
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

?>
