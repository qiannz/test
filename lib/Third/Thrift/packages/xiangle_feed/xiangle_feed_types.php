<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'] . '/Thrift.php';

$GLOBALS['feed_E_GroupType'] = array('NO_GROUP'=>0, 'ONE_USER_MULTI_EVENTS'=>1, 'MULTI_USERS_ONE_EVENT'=>2);

final class feed_GroupType {
    const NO_GROUP = 0;
    const ONE_USER_MULTI_EVENTS = 1;
    const MULTI_USERS_ONE_EVENT = 2;
    public static $__names = array(0=>'NO_GROUP', 1=>'ONE_USER_MULTI_EVENTS', 2=>'MULTI_USERS_ONE_EVENT');
}

$GLOBALS['feed_E_FeedType'] = array('DEF'=>1, 'WEIBO'=>2, 'SHOP'=>3, 'ACCTIVITY'=>4, 'USER_INFO'=>5, 'USER_FOLLOW'=>6, 'GIFT'=>7, 'COMMNET'=>8, 'SIGN_IN'=>9, 'USER_UPLOAD_SHOPIMG'=>10, 'USER_DOWNLOAD_COUPON'=>11, 'USER_WISHLIST'=>12, 'ACCTIVITY_SAY'=>13, 'ACCTIVITY_JOIN'=>14, 'SHOP_FOLLOW'=>15, 'USER_FOLLOW_EACH'=>16, 'THIRD_APP'=>17, 'SHOP_PUBLISH_COUPON'=>18, 'SHOP_UPLOAD_IMAGE'=>19, 'USER_CHANGE_AVATAR'=>20, 'USER_MARK'=>21, 'USER_CHANGE_NICKNAME'=>22, 'USER_MARK_WEIBO'=>23, 'USER_MARK_TOPIC'=>24, 'USER_MARK_COUPON'=>25, 'USER_MARK_GIFT'=>26, 'USER_MARK_SUBJECT'=>27, 'USER_MOBILE_FOLLOW_SHOP'=>28, 'USER_MOBILE_FOLLOWED_SHOP'=>29, 'DIANPING_WEIBO'=>30);

final class feed_FeedType {
    const DEF = 1;
    const WEIBO = 2;
    const SHOP = 3;
    const ACCTIVITY = 4;
    const USER_INFO = 5;
    const USER_FOLLOW = 6;
    const GIFT = 7;
    const COMMNET = 8;
    const SIGN_IN = 9;
    const USER_UPLOAD_SHOPIMG = 10;
    const USER_DOWNLOAD_COUPON = 11;
    const USER_WISHLIST = 12;
    const ACCTIVITY_SAY = 13;
    const ACCTIVITY_JOIN = 14;
    const SHOP_FOLLOW = 15;
    const USER_FOLLOW_EACH = 16;
    const THIRD_APP = 17;
    const SHOP_PUBLISH_COUPON = 18;
    const SHOP_UPLOAD_IMAGE = 19;
    const USER_CHANGE_AVATAR = 20;
    const USER_MARK = 21;
    const USER_CHANGE_NICKNAME = 22;
    const USER_MARK_WEIBO = 23;
    const USER_MARK_TOPIC = 24;
    const USER_MARK_COUPON = 25;
    const USER_MARK_GIFT = 26;
    const USER_MARK_SUBJECT = 27;
    const USER_MOBILE_FOLLOW_SHOP = 28;
    const USER_MOBILE_FOLLOWED_SHOP = 29;
    const DIANPING_WEIBO = 30;
    public static $__names = array(1=>'DEF', 2=>'WEIBO', 3=>'SHOP', 4=>'ACCTIVITY', 5=>'USER_INFO', 6=>'USER_FOLLOW', 7=>'GIFT', 8=>'COMMNET', 9=>'SIGN_IN', 10=>'USER_UPLOAD_SHOPIMG', 11=>'USER_DOWNLOAD_COUPON', 12=>'USER_WISHLIST', 13=>'ACCTIVITY_SAY', 14=>'ACCTIVITY_JOIN', 15=>'SHOP_FOLLOW', 16=>'USER_FOLLOW_EACH', 17=>'THIRD_APP', 18=>'SHOP_PUBLISH_COUPON', 19=>'SHOP_UPLOAD_IMAGE', 20=>'USER_CHANGE_AVATAR', 21=>'USER_MARK', 22=>'USER_CHANGE_NICKNAME', 23=>'USER_MARK_WEIBO', 24=>'USER_MARK_TOPIC', 25=>'USER_MARK_COUPON', 26=>'USER_MARK_GIFT', 27=>'USER_MARK_SUBJECT', 28=>'USER_MOBILE_FOLLOW_SHOP', 29=>'USER_MOBILE_FOLLOWED_SHOP', 30=>'DIANPING_WEIBO');
}

$GLOBALS['feed_E_UserType'] = array('NORMAL'=>0, 'SHOP'=>1, 'STAR'=>2, 'GROUP'=>3, 'ALL'=>15);

final class feed_UserType {
    const NORMAL = 0;
    const SHOP = 1;
    const STAR = 2;
    const GROUP = 3;
    const ALL = 15;
    public static $__names = array(0=>'NORMAL', 1=>'SHOP', 2=>'STAR', 3=>'GROUP', 15=>'ALL');
}

$GLOBALS['feed_E_BigLabelType'] = array('TOTAL'=>0, 'FOLLOW'=>1, 'FRIEND'=>2, 'SHOP'=>3, 'GROUP'=>4);

final class feed_BigLabelType {
    const TOTAL = 0;
    const FOLLOW = 1;
    const FRIEND = 2;
    const SHOP = 3;
    const GROUP = 4;
    public static $__names = array(0=>'TOTAL', 1=>'FOLLOW', 2=>'FRIEND', 3=>'SHOP', 4=>'GROUP');
}

$GLOBALS['feed_E_LabelType'] = array('TOTAL'=>0, 'WEIBO'=>1, 'SYS'=>2, 'IMG'=>3, 'VIDEO'=>4, 'ATME'=>5, 'FORWARD'=>6, 'SHOP_SELF'=>101);

final class feed_LabelType {
    const TOTAL = 0;
    const WEIBO = 1;
    const SYS = 2;
    const IMG = 3;
    const VIDEO = 4;
    const ATME = 5;
    const FORWARD = 6;
    const SHOP_SELF = 101;
    public static $__names = array(0=>'TOTAL', 1=>'WEIBO', 2=>'SYS', 3=>'IMG', 4=>'VIDEO', 5=>'ATME', 6=>'FORWARD', 101=>'SHOP_SELF');
}

$GLOBALS['feed_E_GroupBigLabelType'] = array('TOTAL'=>5, 'GROUP_AT_ME'=>6);

final class feed_GroupBigLabelType {
    const TOTAL = 5;
    const GROUP_AT_ME = 6;
    public static $__names = array(5=>'TOTAL', 6=>'GROUP_AT_ME');
}

$GLOBALS['feed_E_GroupLabelType'] = array('TOTAL'=>10, 'WEIBO'=>11, 'SYS'=>12, 'IMG'=>13, 'VIDEO'=>14, 'ATME'=>15, 'FORWARD'=>16);

final class feed_GroupLabelType {
    const TOTAL = 10;
    const WEIBO = 11;
    const SYS = 12;
    const IMG = 13;
    const VIDEO = 14;
    const ATME = 15;
    const FORWARD = 16;
    public static $__names = array(10=>'TOTAL', 11=>'WEIBO', 12=>'SYS', 13=>'IMG', 14=>'VIDEO', 15=>'ATME', 16=>'FORWARD');
}

$GLOBALS['feed_E_FeedAttr'] = array('NORMAL'=>0, 'REFFEED'=>1);

final class feed_FeedAttr {
    const NORMAL = 0;
    const REFFEED = 1;
    public static $__names = array(0=>'NORMAL', 1=>'REFFEED');
}

class feed_Feed {
    static $_TSPEC;
    
    public $id = null;
    public $user = null;
    public $text = null;
    public $type = null;
    public $is_deleted = 0;
    public $imgs = null;
    public $videos = null;
    public $extension = null;
    public $attr = null;
    public $attr_int = 0;
    public $source_id = "0";
    public $rt_id = "0";
    public $create_time = null;
    public $user_type = null;
    public $is_reweeted = 0;
    public $reweet_cnt = 0;
    public $feed_attr_type = 0;
    public $feed_attr_extension = "";
    public $source_app = "";
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'id', 'type'=>TType::STRING), 2=>array('var'=>'user', 'type'=>TType::STRING), 3=>array('var'=>'text', 'type'=>TType::STRING), 4=>array('var'=>'type', 'type'=>TType::I32), 5=>array('var'=>'is_deleted', 'type'=>TType::I16), 6=>array('var'=>'imgs', 'type'=>TType::STRING), 7=>array('var'=>'videos', 'type'=>TType::STRING), 8=>array('var'=>'extension', 'type'=>TType::STRING), 9=>array('var'=>'attr', 'type'=>TType::LST, 'etype'=>TType::I32, 'elem'=>array('type'=>TType::I32)), 10=>array('var'=>'attr_int', 'type'=>TType::I32), 11=>array('var'=>'source_id', 'type'=>TType::STRING), 12=>array('var'=>'rt_id', 'type'=>TType::STRING), 13=>array('var'=>'create_time', 'type'=>TType::I32), 14=>array('var'=>'user_type', 'type'=>TType::I16), 15=>array('var'=>'is_reweeted', 'type'=>TType::I16), 16=>array('var'=>'reweet_cnt', 'type'=>TType::I32), 17=>array('var'=>'feed_attr_type', 'type'=>TType::I16), 18=>array('var'=>'feed_attr_extension', 'type'=>TType::STRING), 19=>array('var'=>'source_app', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['id'])){
                $this->id = $vals['id'];
            }
            if(isset($vals['user'])){
                $this->user = $vals['user'];
            }
            if(isset($vals['text'])){
                $this->text = $vals['text'];
            }
            if(isset($vals['type'])){
                $this->type = $vals['type'];
            }
            if(isset($vals['is_deleted'])){
                $this->is_deleted = $vals['is_deleted'];
            }
            if(isset($vals['imgs'])){
                $this->imgs = $vals['imgs'];
            }
            if(isset($vals['videos'])){
                $this->videos = $vals['videos'];
            }
            if(isset($vals['extension'])){
                $this->extension = $vals['extension'];
            }
            if(isset($vals['attr'])){
                $this->attr = $vals['attr'];
            }
            if(isset($vals['attr_int'])){
                $this->attr_int = $vals['attr_int'];
            }
            if(isset($vals['source_id'])){
                $this->source_id = $vals['source_id'];
            }
            if(isset($vals['rt_id'])){
                $this->rt_id = $vals['rt_id'];
            }
            if(isset($vals['create_time'])){
                $this->create_time = $vals['create_time'];
            }
            if(isset($vals['user_type'])){
                $this->user_type = $vals['user_type'];
            }
            if(isset($vals['is_reweeted'])){
                $this->is_reweeted = $vals['is_reweeted'];
            }
            if(isset($vals['reweet_cnt'])){
                $this->reweet_cnt = $vals['reweet_cnt'];
            }
            if(isset($vals['feed_attr_type'])){
                $this->feed_attr_type = $vals['feed_attr_type'];
            }
            if(isset($vals['feed_attr_extension'])){
                $this->feed_attr_extension = $vals['feed_attr_extension'];
            }
            if(isset($vals['source_app'])){
                $this->source_app = $vals['source_app'];
            }
        }
    }
    
    public function getName(){
        return 'Feed';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->user);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->text);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if($ftype == TType::I16){
                        $xfer += $input->readI16($this->is_deleted);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->imgs);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->videos);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->extension);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if($ftype == TType::LST){
                        $this->attr = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for($_i4 = 0; $_i4 < $_size0; ++$_i4){
                            $elem5 = null;
                            $xfer += $input->readI32($elem5);
                            $this->attr[] = $elem5;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->attr_int);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->source_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->rt_id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->create_time);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if($ftype == TType::I16){
                        $xfer += $input->readI16($this->user_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if($ftype == TType::I16){
                        $xfer += $input->readI16($this->is_reweeted);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->reweet_cnt);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if($ftype == TType::I16){
                        $xfer += $input->readI16($this->feed_attr_type);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->feed_attr_extension);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->source_app);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('Feed');
        if($this->id !== null){
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->user !== null){
            $xfer += $output->writeFieldBegin('user', TType::STRING, 2);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if($this->text !== null){
            $xfer += $output->writeFieldBegin('text', TType::STRING, 3);
            $xfer += $output->writeString($this->text);
            $xfer += $output->writeFieldEnd();
        }
        if($this->type !== null){
            $xfer += $output->writeFieldBegin('type', TType::I32, 4);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->is_deleted !== null){
            $xfer += $output->writeFieldBegin('is_deleted', TType::I16, 5);
            $xfer += $output->writeI16($this->is_deleted);
            $xfer += $output->writeFieldEnd();
        }
        if($this->imgs !== null){
            $xfer += $output->writeFieldBegin('imgs', TType::STRING, 6);
            $xfer += $output->writeString($this->imgs);
            $xfer += $output->writeFieldEnd();
        }
        if($this->videos !== null){
            $xfer += $output->writeFieldBegin('videos', TType::STRING, 7);
            $xfer += $output->writeString($this->videos);
            $xfer += $output->writeFieldEnd();
        }
        if($this->extension !== null){
            $xfer += $output->writeFieldBegin('extension', TType::STRING, 8);
            $xfer += $output->writeString($this->extension);
            $xfer += $output->writeFieldEnd();
        }
        if($this->attr !== null){
            if(!is_array($this->attr)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('attr', TType::LST, 9);
            {
                $output->writeListBegin(TType::I32, count($this->attr));
                {
                    foreach($this->attr as $iter6){
                        $xfer += $output->writeI32($iter6);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        if($this->attr_int !== null){
            $xfer += $output->writeFieldBegin('attr_int', TType::I32, 10);
            $xfer += $output->writeI32($this->attr_int);
            $xfer += $output->writeFieldEnd();
        }
        if($this->source_id !== null){
            $xfer += $output->writeFieldBegin('source_id', TType::STRING, 11);
            $xfer += $output->writeString($this->source_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->rt_id !== null){
            $xfer += $output->writeFieldBegin('rt_id', TType::STRING, 12);
            $xfer += $output->writeString($this->rt_id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->create_time !== null){
            $xfer += $output->writeFieldBegin('create_time', TType::I32, 13);
            $xfer += $output->writeI32($this->create_time);
            $xfer += $output->writeFieldEnd();
        }
        if($this->user_type !== null){
            $xfer += $output->writeFieldBegin('user_type', TType::I16, 14);
            $xfer += $output->writeI16($this->user_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->is_reweeted !== null){
            $xfer += $output->writeFieldBegin('is_reweeted', TType::I16, 15);
            $xfer += $output->writeI16($this->is_reweeted);
            $xfer += $output->writeFieldEnd();
        }
        if($this->reweet_cnt !== null){
            $xfer += $output->writeFieldBegin('reweet_cnt', TType::I32, 16);
            $xfer += $output->writeI32($this->reweet_cnt);
            $xfer += $output->writeFieldEnd();
        }
        if($this->feed_attr_type !== null){
            $xfer += $output->writeFieldBegin('feed_attr_type', TType::I16, 17);
            $xfer += $output->writeI16($this->feed_attr_type);
            $xfer += $output->writeFieldEnd();
        }
        if($this->feed_attr_extension !== null){
            $xfer += $output->writeFieldBegin('feed_attr_extension', TType::STRING, 18);
            $xfer += $output->writeString($this->feed_attr_extension);
            $xfer += $output->writeFieldEnd();
        }
        if($this->source_app !== null){
            $xfer += $output->writeFieldBegin('source_app', TType::STRING, 19);
            $xfer += $output->writeString($this->source_app);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedContent {
    static $_TSPEC;
    
    public $feed = null;
    public $rt_feed = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'feed', 'type'=>TType::STRUCT, 'class'=>'feed_Feed'), 2=>array('var'=>'rt_feed', 'type'=>TType::STRUCT, 'class'=>'feed_Feed'));
        }
        if(is_array($vals)){
            if(isset($vals['feed'])){
                $this->feed = $vals['feed'];
            }
            if(isset($vals['rt_feed'])){
                $this->rt_feed = $vals['rt_feed'];
            }
        }
    }
    
    public function getName(){
        return 'FeedContent';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRUCT){
                        $this->feed = new feed_Feed();
                        $xfer += $this->feed->read($input);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::STRUCT){
                        $this->rt_feed = new feed_Feed();
                        $xfer += $this->rt_feed->read($input);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedContent');
        if($this->feed !== null){
            if(!is_object($this->feed)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('feed', TType::STRUCT, 1);
            $xfer += $this->feed->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if($this->rt_feed !== null){
            if(!is_object($this->rt_feed)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('rt_feed', TType::STRUCT, 2);
            $xfer += $this->rt_feed->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedSet {
    static $_TSPEC;
    
    public $feed_contents = null;
    public $feed_scoreval = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'feed_contents', 'type'=>TType::LST, 'etype'=>TType::STRUCT, 'elem'=>array('type'=>TType::STRUCT, 'class'=>'feed_FeedContent')), 2=>array('var'=>'feed_scoreval', 'type'=>TType::STRING));
        }
        if(is_array($vals)){
            if(isset($vals['feed_contents'])){
                $this->feed_contents = $vals['feed_contents'];
            }
            if(isset($vals['feed_scoreval'])){
                $this->feed_scoreval = $vals['feed_scoreval'];
            }
        }
    }
    
    public function getName(){
        return 'FeedSet';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::LST){
                        $this->feed_contents = array();
                        $_size7 = 0;
                        $_etype10 = 0;
                        $xfer += $input->readListBegin($_etype10, $_size7);
                        for($_i11 = 0; $_i11 < $_size7; ++$_i11){
                            $elem12 = null;
                            $elem12 = new feed_FeedContent();
                            $xfer += $elem12->read($input);
                            $this->feed_contents[] = $elem12;
                        }
                        $xfer += $input->readListEnd();
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->feed_scoreval);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedSet');
        if($this->feed_contents !== null){
            if(!is_array($this->feed_contents)){
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('feed_contents', TType::LST, 1);
            {
                $output->writeListBegin(TType::STRUCT, count($this->feed_contents));
                {
                    foreach($this->feed_contents as $iter13){
                        $xfer += $iter13->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        if($this->feed_scoreval !== null){
            $xfer += $output->writeFieldBegin('feed_scoreval', TType::STRING, 2);
            $xfer += $output->writeString($this->feed_scoreval);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class feed_FeedCount {
    static $_TSPEC;
    
    public $id = null;
    public $rt = null;
    
    public function __construct($vals = null){
        if(!isset(self::$_TSPEC)){
            self::$_TSPEC = array(1=>array('var'=>'id', 'type'=>TType::STRING), 3=>array('var'=>'rt', 'type'=>TType::I32));
        }
        if(is_array($vals)){
            if(isset($vals['id'])){
                $this->id = $vals['id'];
            }
            if(isset($vals['rt'])){
                $this->rt = $vals['rt'];
            }
        }
    }
    
    public function getName(){
        return 'FeedCount';
    }
    
    public function read($input){
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while(true){
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if($ftype == TType::STOP){
                break;
            }
            switch($fid){
                case 1:
                    if($ftype == TType::STRING){
                        $xfer += $input->readString($this->id);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if($ftype == TType::I32){
                        $xfer += $input->readI32($this->rt);
                    }else{
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    
    public function write($output){
        $xfer = 0;
        $xfer += $output->writeStructBegin('FeedCount');
        if($this->id !== null){
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if($this->rt !== null){
            $xfer += $output->writeFieldBegin('rt', TType::I32, 3);
            $xfer += $output->writeI32($this->rt);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

?>
